name: CI

on:
  push: {}
  pull_request: {}


jobs:
  lint:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']
    runs-on: ${{ matrix.os }}
    env:
      POETRY_HOME: /opt/poetry
      POETRY_CONFIG_DIR: /opt/poetry/.config
      POETRY_VIRTUALENVS_PATH: /opt/poetry-venvs
      PRE_COMMIT_HOME: /opt/pre-commit

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry and project dependencies
      id: deps-cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.POETRY_HOME }}
          ${{ env.POETRY_VIRTUALENVS_PATH }}
        key: lint-${{ matrix.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: lint-${{ matrix.os }}-python-${{ matrix.python-version }}-poetry-

    - name: Install Poetry
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: |
        python -m venv "${POETRY_HOME}"
        "${POETRY_HOME}/bin/pip" install poetry==1.2.1
        "${POETRY_HOME}"/bin/poetry --version

    - name: Add Poetry to PATH
      run: echo "${POETRY_HOME}/bin" >> $GITHUB_PATH

    - name: Install dependencies
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --sync --only lint

    - name: Cache pre-commit environments
      id: cache-pre-commit
      uses: actions/cache@v3
      with:
        path: ${{ env.PRE_COMMIT_HOME }}
        key: lint-${{ matrix.os }}-python-${{ matrix.python-version }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: lint-${{ matrix.os }}-python-${{ matrix.python-version }}-pre-commit-

    - name: Prepare pre-commit envs
      run: |
        poetry run pre-commit validate-config
        poetry run pre-commit install-hooks
        poetry run pre-commit gc

    - name: Lint
      run: |
        poetry run pre-commit run --all-files

  test-ubuntu:
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', 3.11-dev, pypy3.7]
    runs-on: ${{ matrix.os }}
    env:
      POETRY_HOME: /opt/poetry
      POETRY_CONFIG_DIR: /opt/poetry/.config
      POETRY_VIRTUALENVS_PATH: /opt/poetry-venvs
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry and project dependencies
      id: deps-cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.POETRY_HOME }}
          ${{ env.POETRY_VIRTUALENVS_PATH }}
        key: test-${{ matrix.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: test-${{ matrix.os }}-python-${{ matrix.python-version }}-poetry-

    - name: Install Poetry
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: |
        python -m venv "${POETRY_HOME}"
        "${POETRY_HOME}/bin/pip" install poetry==1.2.1
        "${POETRY_HOME}"/bin/poetry --version

    - name: Add Poetry to PATH
      run: echo "${POETRY_HOME}/bin" >> $GITHUB_PATH

    - name: Install dependencies
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --sync --without lint

    - name: Test
      run: |
        poetry run pytest --cov bumpver --cov-report term-missing

  test-macos:
    strategy:
      matrix:
        os: [macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', 3.11-dev, pypy3.7]
    runs-on: ${{ matrix.os }}
    env:
      POETRY_HOME: /usr/local/opt/poetry
      POETRY_CONFIG_DIR: /usr/local/opt/poetry/.config
      POETRY_VIRTUALENVS_PATH: /usr/local/opt/poetry-venvs
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry and project dependencies
      id: deps-cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.POETRY_HOME }}
          ${{ env.POETRY_VIRTUALENVS_PATH }}
        key: test-${{ matrix.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: test-${{ matrix.os }}-python-${{ matrix.python-version }}-poetry-

    - name: Install Poetry
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: |
        python -m venv "${{ env.POETRY_HOME }}"
        "${{ env.POETRY_HOME }}/bin/pip" install poetry==1.2.1
        "${{ env.POETRY_HOME }}"/bin/poetry --version

    - name: Add Poetry to PATH
      run: echo "${{ env.POETRY_HOME }}/bin" >> $GITHUB_PATH

    - name: Install mercurial
      run: brew install mercurial

    - name: Install dependencies
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --sync --without lint

    - name: Test
      run: |
        poetry run pytest --cov bumpver --cov-report term-missing

  test-windows:
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', 3.11-dev, pypy3.7]
    runs-on: ${{ matrix.os }}
    env:
      POETRY_HOME: ..\poetry
      POETRY_CONFIG_DIR: ..\poetry\.config
      POETRY_VIRTUALENVS_PATH: ..\poetry-venvs
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry and project dependencies
      id: deps-cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.POETRY_HOME }}
          ${{ env.POETRY_VIRTUALENVS_PATH }}
        key: test-${{ matrix.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: test-${{ matrix.os }}-python-${{ matrix.python-version }}-poetry-

    - name: Install Poetry
      if: steps.deps-cache.outputs.cache-hit != 'true'
      run: |
        python -m venv ${{ env.POETRY_HOME }}
        & "${{ env.POETRY_HOME }}\Scripts\pip" install poetry==1.2.1
        & "${{ env.POETRY_HOME }}\Scripts\poetry" --version

    - name: Add Poetry to PATH
      run: |
        echo "$((Get-Item "${{ env.POETRY_HOME }}").FullName)\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install dependencies
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --sync --without lint

    - name: Test
      run: |
        poetry run pytest --cov bumpver --cov-report term-missing
